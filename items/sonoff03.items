Group sonoff
Group sonoff03

Switch sf03_Light "Lampada di sale" <light> (sonoff03,sonoff,LR,gLight,gLuci) [ "Lighting" ]
    { mqtt=">[broker:cmnd/sonoff03/POWER:command:*:default],
            <[broker:stat/sonoff03/POWER:state:default]" }

// TEMPERATURA E UMIDITA DA AGGIORNARE NON FUNZIONA
//Number sf03_Temp    "Sogg TV [%.1f Â°C]"    <temperature>   (gTemp,sonoff03,sonoff,gGraph)
//  { mqtt="<[broker:tele/sonoff03/SENSOR:state:JSONPATH($.AM2301.Temperature)]" }
//Number sf03_Humid   "Sogg TV [%.1f %%]"    <humidity>      (gHumd,sonoff03,sonoff,gGraph)
//    { mqtt="<[broker:tele/sonoff03/SENSOR:state:JSONPATH($.AM2301.Humidity)]" }

// STATUS
Number sf03_Light_RSSI "Mobile TV: RSSI [%d %%]" <qualityofservice> (sonoff03,sonoff,gRSSI)
    { mqtt="<[broker:tele/sonoff03/STATE:state:JSONPATH($.Wifi.RSSI)]" }
String sf03_Light_Reachable "Mobile TV: Status [%s]" <switch> (sonoff03,sonoff,gReachable)
    { mqtt="<[broker:tele/sonoff03/LWT:state:MAP(reachable.map)]" }
String sf03_Uptime "Mobile TV: Uptime [%s]" <clock> (sonoff03,sonoff)
    { mqtt="<[broker:tele/sonoff03/STATE:state:JSONPATH($.Uptime)]" }

// Versions
DateTime  sf03_Date     "Sonoff 03: Refresh [ %1$tH:%1$tM]"   <clock>      (sonoff03,sonoff,gVersion,gTime)
    { mqtt="<[broker:tele/sonoff03/STATE:state:JSONPATH($.Time)]" }

String    sf03_Core     "Sonoff 03: Core [%s]"                <text>       (sonoff03,sonoff,gVersion,gCore)
    { mqtt="<[broker:stat/sonoff03/STATUS2:state:JSONPATH($.StatusFWR.Core)]" }

String    sf03_SDK      "Sonoff 03: SDK [%s]"                 <text>       (sonoff03,sonoff,gVersion,gSDK)
    { mqtt="<[broker:stat/sonoff03/STATUS2:state:JSONPATH($.StatusFWR.SDK)]" }

String    sf03_Version  "Sonoff 03: Version [%s]"             <text>       (sonoff03,sonoff,gVersion,gFirmware)
    { mqtt="<[broker:stat/sonoff03/STATUS2:state:JSONPATH($.StatusFWR.Version)]" }
