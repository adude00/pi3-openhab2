rule "Reset Termostato Soggiorno items at boot"
  when
    System started
  then
    tsSoggiornoWait.sendCommand(OFF)
    tsSoggiornoRunning.sendCommand(OFF)
    logInfo("tsSoggiornoWait","System started: Turning off tsSoggiornoWait and tsSoggiornoRunning")
end

rule "Termostato Soggiorno AutoON"
  when
    Item faikin02_power changed from OFF to ON

  then
    if ( tsSoggiornoAutoON == ON && tsSoggiorno == OFF ) {
      createTimer(now.plusSeconds(2), [|
        tsSoggiorno.sendCommand(ON)
        logInfo("tsSoggiornoWait","Aircon ON. Termostato OFF. tsSoggiornoAutoON=ON: accendo Termostato.")
      ])
    }
end

rule "Termostato Soggiorno ON - Setting startup Temp"
  when
    Item tsSoggiorno changed from OFF to ON
  then
    tsSoggiornoWait.sendCommand(OFF)
    tsSoggiornoRunning.sendCommand(OFF)
    logInfo("tsSoggiornoWait","Termostato ON - Turning off tsSoggiornoWait and tsSoggiornoRunning")


    if (faikin02_power.state == OFF ) {
      faikin02_power.sendCommand(ON)
      logInfo("tsSoggiornoWait","Termostato ON. Aircon OFF. Turning ON Aircon")

      createTimer(now.plusSeconds(10), [|

        if ( tsSoggiornoStartupTempON.state == ON ) {
          logInfo("tsSoggiornoWait","Termostato ON. tsSoggiornoStartupTempON=ON. Setting Start Temperature: " + tsSoggiornoStartupTemp.state)
          faikin02_temp.sendCommand(tsSoggiornoStartupTemp.state as Number)
        }

      ]) //TIMER ON

      // TIMER FAN Start
      createTimer(now.plusSeconds(27), [|

        if ( tsSoggiornoStartupFan.state == ON ) {
          logInfo("tsSoggiornoWait","Termostato ON. tsSoggiornoStartupFan=ON. Setting Start FAN: " + tsSoggiornoStartupFanS.state.toString)
	  faikin02_fan.sendCommand(tsSoggiornoStartupFanS.state.toString)
	}
     
      ]) // TIMER FAN End

    }

end

rule "Termostato Soggiorno OFF - Turning OFF if needed"
  when
    Item tsSoggiorno changed from ON to OFF
  then
  if ( tsSoggiornoOverride.state == OFF ) {
    logInfo("tsSoggiornoWait","Termostato OFF. tsSoggiornoOverride=OFF. Turning OFF Aircon")
    faikin02_power.sendCommand(OFF)
  }
end


rule "Termostato Soggiorno Wait"
when
    Item tsSoggiorno changed from OFF to ON or
    Item Casa_Temperature_AVG changed or
    Item sf04_Temp changed or
    Item avgSoggiornoAvg changed or
    Item spSoggiorno changed or
    Item hsSoggiorno changed
then

  // STARTING A RANDOM TIMER 0-10 second
  var Number waitRnd
  waitRnd = (Math::random * 10.0).intValue + 1
  createTimer(now.plusSeconds(waitRnd),  [ |

  // MAKE SURE WE ARE NOT RUNNING
  if ( tsSoggiornoRunning.state == OFF ) {
    // FIRST THING FIRST - WE ARE RUNNING
    tsSoggiornoRunning.sendCommand(ON)
    if (tsSoggiornoWaitDebug.state == ON ) logInfo("tsSoggiornoWait","DEBUG: RULE Started")

    var Number acTemp
    acTemp = faikin02_temp.state as Number

    var Number acTempMax  = tsSoggiornoWaitMaxTemp.state as DecimalType
    var Number acTempMin  = tsSoggiornoWaitMinTemp.state as DecimalType
    var Number acTempStep = tsSoggiornoWaitStep.state as Number
    var Number tolSogg    = hsSoggiorno.state
    var Number setpoint   = spSoggiorno.state


    // Temp to check against
    var Number cur_temp = Casa_Temperature_AVG.state
    // Check if we want to use sofa sensor and not house average and override in case
    if (tsSoggSensor.state == 2 ) cur_temp = sf04_Temp.state
    if (tsSoggSensor.state == 3 ) cur_temp = avgSoggiornoAvg.state


    // val int timerTime = (Bewaesserungsdauer.state as Number).intValue
    // https://community.openhab.org/t/solved-int-from-switch-item-number-as-now-plusminutes/60035/17
    val int timerTime = (tsSoggiornoWaitMins.state as Number).intValue
   
    if (tsSoggiorno.state == ON && tsSoggiornoType.state == 3 && tsSoggiornoWait.state == OFF) { 
      if (tsSoggiornoWaitDebug.state == ON ) logInfo("tsSoggiornoWait","DEBUG: INFO: cur_temp: (" + cur_temp + "), setpoint: (" + setpoint + "), tolSogg: (" + tolSogg + "), acTemp: " + acTemp)

      if ( ( cur_temp + tolSogg )  < setpoint ) {
      ///////////////
      // TOO COLD //
      /////////////

        // Creating  Wait Timer
        tsSoggiornoWait.sendCommand(ON)
        if (tsSoggiornoWaitDebug.state == ON ) logInfo("tsSoggiornoWait","DEBUG: TIMER started, tsSoggiornoWait ON")
        createTimer(now.plusMinutes(timerTime), [|
            tsSoggiornoWait.sendCommand(OFF)
            if (tsSoggiornoWaitDebug.state == ON ) logInfo("tsSoggiornoWait","DEBUG: TIMER expired, tsSoggiornoWait OFF")
          ])


	  // TOO COLD COOLING: INCREASE TEMP

	  if ((faikin02_mode.state+"") == "C") {
	    if (pow03_Power.state < 40) {
              // COMPRESSOR IS NOT RUNNING

              if (faikin02_power.state == ON ) {
                // AIRCON IS ON EVEN IF ITS NOT RUNNING - TURN IT OFF ALTOGETHER
                if (tsSoggiornoPowerOff.state == ON ) faikin02_power.sendCommand(OFF)
                if (tsSoggiornoWaitDebug.state == ON ) logInfo("tsSoggiornoWait","DEBUG - cooling: TOO COLD! cur_temp: (" + cur_temp + ") lower than setpoint (" + setpoint + "). Pump power: " + pow03_Power.state + "W. Compressor not doing anything already. Turning aircon OFF!")
              } else {
                if (tsSoggiornoWaitDebug.state == ON ) logInfo("tsSoggiornoWait","DEBUG - cooling: TOO COLD! cur_temp: (" + cur_temp + ") lower than setpoint (" + setpoint + "). Pump power: " + pow03_Power.state + "W. Not doing anything, aircon already OFF!!")
              }

            } else {
            // COMPRESSOR IS RUNNING

              if ( acTemp < acTempMax ) {
                // INCREASE TEMP IF WE CAN
                acTemp = acTemp + acTempStep
                faikin02_temp.sendCommand(acTemp)
                if (tsSoggiornoWaitDebug.state == ON ) logInfo("tsSoggiornoWait","DEBUG - cooling: TOO COLD! cur_temp: (" + cur_temp + ") lower than setpoint (" + setpoint + "). Pump power: " + pow03_Power.state + "W. Increasing acTemp to " + acTemp)
              } else {
                if (tsSoggiornoWaitDebug.state == ON ) logInfo("tsSoggiornoWait","DEBUG - cooling: TOO COLD! cur_temp: (" + cur_temp + ") lower than setpoint (" + setpoint + "). Pump power: " + pow03_Power.state + "W. Not doing anything, reached minimum power: " + acTemp)
              }

              // Re-Silent on Temperature
	      if ( tsSoggiornoSilentOnTemp.state == ON && faikin02_fan.state != "Q" ) {
		createTimer(now.plusSeconds(7),  [ |
		  if (tsSoggiornoWaitDebug.state == ON ) logInfo("tsSoggiornoWait","DEBUG - tsSoggiornoSilentOnTemp=ON, faikin02_fan=" + faikin02_fan.state + ": enabling Silent mode")
		  faikin02_fan.sendCommand("Q")
		  ])
	      }

            }

          } // TOO COLD COOLING CLOSED


          // TOO COLD HEATING: TURN ON or INCREASE TEMP

          if ((faikin02_mode.state+"") == "H") {
	    if (faikin02_power.state == OFF ) { 
	      // AIRCON WAS OFF: TURN IT ON
	      faikin02_power.sendCommand(ON)
	      if (tsSoggiornoWaitDebug.state == ON ) logInfo("tsSoggiornoWait","DEBUG - heating: Aircon was OFF. Turning it ON!")
	    } else {

              // AIRCONF WAS ON, INCREASE TEMP IF POSSIBLE
              if ( acTemp < acTempMax ) {
              // WE CAN INCREASE TEMP
                acTemp = acTemp + acTempStep
                faikin02_temp.sendCommand(acTemp)
                if (tsSoggiornoWaitDebug.state == ON ) logInfo("tsSoggiornoWait","DEBUG - heating: COLD! cur_temp: (" + cur_temp + ") lower than setpoint (" + setpoint + "). Pump power: " + pow03_Power.state + "W. Increasing acTemp to " + acTemp)
              } else {
                // MAX POWER REACHED
                if (tsSoggiornoWaitDebug.state == ON ) logInfo("tsSoggiornoWait","DEBUG - heating: STILL TOO COLD! cur_temp: (" + cur_temp + ") lower than setpoint (" + setpoint + "). Pump power: " + pow03_Power.state + "W. Not doing anything, reached maximum power: " + acTemp)
              }
	    } // IF IT WAS ON

          } // TOO COLD HEATING CLOSED

      } // TOO COLD CLOSED



      if ( ( cur_temp - tolSogg ) > setpoint ) {
      //////////////
      // TOO HOT //
      ////////////

        // Creating Wait Timer
        tsSoggiornoWait.sendCommand(ON)
        if (tsSoggiornoWaitDebug.state == ON ) logInfo("tsSoggiornoWait","DEBUG: TIMER started, tsSoggiornoWait ON")
        createTimer(now.plusMinutes(timerTime), [|
            tsSoggiornoWait.sendCommand(OFF)
            if (tsSoggiornoWaitDebug.state == ON ) logInfo("tsSoggiornoWait","DEBUG: TIMER expired, tsSoggiornoWait OFF")
          ])

	  
	  // TOO HOT HEATING: REDUCE TEMP

	  if ((faikin02_mode.state+"") == "H") {
	    if (pow03_Power.state < 40) {
	      // COMPRESSOR IS NOT RUNNING

	      if (faikin02_power.state == ON ) {
	        // AIRCON IS ON EVEN IF ITS NOT RUNNING - TURN IT OFF ALTOGETHER 
	        if (tsSoggiornoPowerOff.state == ON ) faikin02_power.sendCommand(OFF)
                if (tsSoggiornoWaitDebug.state == ON ) logInfo("tsSoggiornoWait","DEBUG - heating: TOO HOT! cur_temp: (" + cur_temp + ") higher than setpoint (" + setpoint + "). Pump power: " + pow03_Power.state + "W. Compressor not doing anything already. Turning aircon OFF!")
	      } else {
                if (tsSoggiornoWaitDebug.state == ON ) logInfo("tsSoggiornoWait","DEBUG - heating: TOO HOT! cur_temp: (" + cur_temp + ") higher than setpoint (" + setpoint + "). Pump power: " + pow03_Power.state + "W. Not doing anything, aircon already OFF!!")
	      }

	    } else {
	    // COMPRESSOR IS RUNNING

	      if ( acTemp > acTempMin ) {
		// DECREASE POWER IF WE CAN
                acTemp = acTemp - acTempStep
	        faikin02_temp.sendCommand(acTemp)
                if (tsSoggiornoWaitDebug.state == ON ) logInfo("tsSoggiornoWait","DEBUG - heating: TOO HOT! cur_temp: (" + cur_temp + ") higher than setpoint (" + setpoint + "). Pump power: " + pow03_Power.state + "W. Decreasing acTemp to " + acTemp)
	      } else {
                if (tsSoggiornoWaitDebug.state == ON ) logInfo("tsSoggiornoWait","DEBUG - heating: TOO HOT! cur_temp: (" + cur_temp + ") higher than setpoint (" + setpoint + "). Pump power: " + pow03_Power.state + "W. Not doing anything, reached minimum power: " + acTemp)
	      }

              // Re-Silent on Temperature
	      if ( tsSoggiornoSilentOnTemp.state == ON && faikin02_fan.state != "Q" ) {
		createTimer(now.plusSeconds(7),  [ |
		  if (tsSoggiornoWaitDebug.state == ON ) logInfo("tsSoggiornoWait","DEBUG - tsSoggiornoSilentOnTemp=ON, faikin02_fan=" + faikin02_fan.state + ": enabling Silent mode")
		  faikin02_fan.sendCommand("Q")
		  ])
	      }
	    }
	    
	  } // TOO HOT HEATING: CLOSED


	  // TOO HOT COOLING: DECREASE TEMP

	  if ((faikin02_mode.state+"") == "C") {
	    if ( acTemp > acTempMin ) {
	    // WE CAN DECREASE TEMP
              acTemp = acTemp - acTempStep
	      faikin02_temp.sendCommand(acTemp)
              if (tsSoggiornoWaitDebug.state == ON ) logInfo("tsSoggiornoWait","DEBUG - cooling: HOT! cur_temp: (" + cur_temp + ") higher than setpoint (" + setpoint + "). Pump power: " + pow03_Power.state + "W. Increasing acTemp to " + acTemp)
	      if (faikin02_power.state == OFF ) {
	        // TURN ON IF OFF
	        faikin02_power.sendCommand(ON)
	        if (tsSoggiornoWaitDebug.state == ON ) logInfo("tsSoggiornoWait","DEBUG - cooling: Aircon was OFF. Turning it ON!")
	      }
	    } else {
	      // MAX POWER REACHED
              if (tsSoggiornoWaitDebug.state == ON ) logInfo("tsSoggiornoWait","DEBUG - cooling: TOO HOT! cur_temp: (" + cur_temp + ") higher than setpoint (" + setpoint + "). Pump power: " + pow03_Power.state + "W. Not doing anything, reached maximum power: " + acTemp)
	    }

	  } // IF COOLING CLOSED


        } // TOO HOT CLOSED

    } // END IF termostato ON and type=3

  createTimer(now.plusSeconds(3),  [ |
    if (tsSoggiornoWaitDebug.state == ON ) logInfo("tsSoggiornoWait","DEBUG:      Finished")
    tsSoggiornoRunning.sendCommand(OFF)
  ])

  } // END WE ARE RUNNING

  ]) // END RANDOM TIMER

end


