rule "Spegni il wait"
  when
    System started or
    Item tsSoggiorno changed to ON
  then
    tsSoggiornoWait.sendCommand(OFF)
end


rule "Termostato Soggiorno Wait"
  when
    Item Casa_Temperature_AVG changed or
    Item sf04_Temp changed or
    Item avgSoggiornoAvg changed or
    Item spSoggiorno changed or
    Item hsSoggiorno changed
  then
    var Number acPower = acPSoggiorno.state as DecimalType
    var Number acPowerMax = tsSoggiornoWaitMaxTemp.state as DecimalType
    var Number acPowerMin = tsSoggiornoWaitMinTemp.state as DecimalType
    var Number tolSogg = hsSoggiorno.state
    var Number setpoint = spSoggiorno.state


    // Temp to check against
    var Number cur_temp = Casa_Temperature_AVG.state
    // Check if we want to use sofa sensor and not house average and override in case
    if (tsSoggSensor.state == 2 ) cur_temp = sf04_Temp.state
    if (tsSoggSensor.state == 3 ) cur_temp = avgSoggiornoAvg.state


    // val int timerTime = (Bewaesserungsdauer.state as Number).intValue
    // https://community.openhab.org/t/solved-int-from-switch-item-number-as-now-plusminutes/60035/17
    val int timerTime = (tsSoggiornoWaitMins.state as Number).intValue
   
    if (tsSoggiorno.state == ON && tsSoggiornoType.state == 3 && tsSoggiornoWait.state == OFF) { 
      if (tsSoggiornoWaitDebug.state == ON ) logInfo("tsSoggiornoWait","DEBUG - tsSoggiornoWait: INFO: cur_temp: (" + cur_temp + "), setpoint: (" + setpoint + "), tolSogg: (" + tolSogg + "), acPower: " + acPower)

      if ( ( cur_temp + tolSogg )  < setpoint ) {
        if ( acPower < acPowerMax ) {

          // Creating 20 Wait Timer
          tsSoggiornoWait.sendCommand(ON)
          if (tsSoggiornoWaitDebug.state == ON ) logInfo("tsSoggiornoWait","DEBUG - tsSoggiornoWait: timer started, tsSoggiornoWait ON")
          createTimer(now.plusMinutes(timerTime), [|
            tsSoggiornoWait.sendCommand(OFF)
            if (tsSoggiornoWaitDebug.state == ON ) logInfo("tsSoggiornoWait","DEBUG - tsSoggiornoWait: mins expired, tsSoggiornoWait OFF")
          ])

          // TOO COLD: INCREASE by ONE
          acPower = acPower + 1
          acPSoggiorno.sendCommand(acPower)
          if (tsSoggiornoWaitDebug.state == ON ) logInfo("tsSoggiornoWait","DEBUG - tsSoggiornoWait: COLD! cur_temp: (" + cur_temp + ") lower than setpoint (" + setpoint + "). Increasing acPower to " + acPower)

        } else {
            if (tsSoggiornoWaitDebug.state == ON ) logInfo("tsSoggiornoWait","DEBUG - tsSoggiornoWait: MAX Temp (" + acPowerMax + ") Reached. Doing Nothing.")
	}

      }
    
      if ( ( cur_temp - tolSogg ) > setpoint ) {
        if ( acPower > acPowerMin ) {
	  // Creating 20 Wait Timer
          tsSoggiornoWait.sendCommand(ON)
          if (tsSoggiornoWaitDebug.state == ON ) logInfo("tsSoggiornoWait","DEBUG - tsSoggiornoWait: timer started, tsSoggiornoWait ON")
          createTimer(now.plusMinutes(timerTime), [|
            tsSoggiornoWait.sendCommand(OFF)
            if (tsSoggiornoWaitDebug.state == ON ) logInfo("tsSoggiornoWait","DEBUG - tsSoggiornoWait: timer expired, tsSoggiornoWait OFF")
          ])

          // TOO HOT: DECREASE by ONE
          acPower = acPower - 1
          acPSoggiorno.sendCommand(acPower)
          if (tsSoggiornoWaitDebug.state == ON ) logInfo("tsSoggiornoWait","DEBUG - tsSoggiornoWait: HOT! cur_temp: (" + cur_temp + ") higher than setpoint (" + setpoint + "). Decreasing acPower to " + acPower)

        }
      }

    // END IF termostato ON and type=3
  }

end


