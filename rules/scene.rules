rule "Lavoro"
when
    Item Scene_Lavoro changed to ON
then
  pushNotification("Scena: LAVORO", "La scena LAVORO è stata attivata")
  logInfo("Scene","Scena LAVORO: iniziata")

  gTappDog.sendCommand(DOWN)

  createTimer(now.plusSeconds(30), [|
    gScene.sendCommand(OFF)
    logInfo("Scene","Scena LAVORO: finita")
    ])
end

rule "A Casa"
when
    Item Scene_aCasa changed to ON
then
  pushNotification("Scena: A CASA", "La scena A CASA è stata attivata")
  logInfo("Scene","Scena A CASA: iniziata")


  var Number led03_w = led03_w_Morning.state
  var Number led03_c = led03_c_Morning.state

  gTappProd.sendCommand(UP)
  IPCams.sendCommand(OFF)

  // Accendo le luci in soggiorno in base alla configurazione
  sf04_Light.sendCommand(ON)
  led03_DimW.sendCommand(led03_w)
  led03_Dim.sendCommand(led03_c)


  //tsCameretta.sendCommand(OFF)
  //DaikinCameretta_SetPoint.sendCommand(20.0)
  //DaikinCameretta_Fan.sendCommand("SILENCE")

  createTimer(now.plusSeconds(30), [|
    AutoRientro.sendCommand(OFF) 
    gScene.sendCommand(OFF)
    logInfo("Scene","Scena A CASA: finita")
    ])
end

rule "Mattina: SIAMO SVEGLI"
when
    Item Scene_Mattina changed to ON
then
  pushNotification("Scena: MATTINA", "La scena MATTINA è stata attivata")
  logInfo("Scene","Scena MATTINA: iniziata")

  var Number led03_w = led03_w_Morning.state
  var Number led03_c = led03_c_Morning.state

  if (conf_autooff_ac_kid.state == ON) {
    logInfo("Scene","MATTINA: AutoOFF cameretta: Timer Partito")
    val int timer01mins = (conf_autooff_ac_kid_mins.state as Number).intValue
    createTimer(now.plusMinutes(timer01mins), [|
      DaikinCameretta_Power.sendCommand(OFF)
      logInfo("Scene","MATTINA: AutoOFF cameretta: Spento")
    ])

  }

  if (conf_autooff_ac_bdr.state == ON) {
    logInfo("Scene","MATTINA: AutoOFF Bedroom: Spengo il Clima")
    DaikinMatrimoniale_Power.sendCommand(OFF)
  }

  // AC Soggiorno
  if (conf_autoon_ac_hot_sogg.state == ON) {
    Air_Conditioner_Temperature.sendCommand(23.0)
    createTimer(now.plusSeconds(15), [|
          tsSoggiorno.sendCommand(ON)
      ])
    //createTimer(now.plusSeconds(35), [|
    //    Air_Conditioner_Temperature.sendCommand(23.0)
    //  ])
  }

  gTappProd.sendCommand(UP)
  IPCams.sendCommand(OFF)
  tsBagno.sendCommand(ON)

  // Accendo le luci in soggiorno in base alla configurazione
  sf04_Light.sendCommand(ON)
  led03_DimW.sendCommand(led03_w)
  led03_Dim.sendCommand(led03_c)

  //Air_Conditioner_Temperature.sendCommand(23.0)
  createTimer(now.plusSeconds(10), [|
        val int tempNum01 = (conf_mattina_ac_kid_temp.state as Number).intValue
	//tsSoggiorno.sendCommand(ON)
        DaikinCameretta_SetPoint.sendCommand(tempNum01)
        DaikinCameretta_Fan.sendCommand("SILENCE")
    ])


  createTimer(now.plusSeconds(30), [|
    AutoRientro.sendCommand(OFF) 
    //Air_Conditioner_Temperature.sendCommand(23.0)
    gScene.sendCommand(OFF)
    logInfo("Scene","Scena MATTINA: finita")
    ])
end

rule "Usciamo"
when
    Item Scene_Usciamo changed to ON
then
  pushNotification("Scena: USCIAMO", "La scena USCIAMO è stata attivata")
  logInfo("Scene","Scena USCIAMO: iniziata")

  gTappProd.sendCommand(DOWN)
  gLuci.sendCommand(OFF)

  createTimer(now.plusSeconds(30), [|
    IPCams.sendCommand(ON)
    gScene.sendCommand(OFF)
    logInfo("Scene","Scena USCIAMO: Telecamere accese e scena finita")
    ])
  createTimer(now.plusSeconds(300), [|
    AutoRientro.sendCommand(ON)
    ])
end


rule "Privacy "
when
    Item Scene_Privacy changed to ON
then
    logInfo("Scene","Scena PRIVACY: iniziata")
    gTappLvrm.sendCommand(DOWN)
    createTimer(now.plusSeconds(30), [|
      gScene.sendCommand(OFF)
      logInfo("Scene","Scena PRIVACY: finita")
    ])
end

rule "Chiudi tutto"
when
    Item Scene_Chiudi changed to ON
then
    logInfo("Scene","Scena CHIUDI: iniziata")
    gTappProd.sendCommand(DOWN)
    createTimer(now.plusSeconds(30), [|
      gScene.sendCommand(OFF)
      logInfo("Scene","Scena CHIUDI: finita")
    ])
end

rule "Vado a Letto: BUONANOTTE"
when
    Item Scene_aLetto changed to ON
then
    logInfo("Scene","Scena A Letto: iniziata")
    
    createTimer(now.plusSeconds(1),  [ |
      gTappProd.sendCommand(DOWN)
      logInfo("Scene","Scena A Letto: tapparelle abbassate")
    ])

    createTimer(now.plusSeconds(3),  [ |
      if (tsSoggiorno.state == ON) {
        tsSoggiorno.sendCommand(OFF)
      }
      logInfo("Scene","Scena A Letto: termostato spento")
    ])

    createTimer(now.plusSeconds(3),  [ |
      gLuciSogg.sendCommand(OFF)
      logInfo("Scene","Scena A Letto: luci soggiorno spente")
    ])

    createTimer(now.plusSeconds(7),  [ |
      gCinema.sendCommand(OFF)
      logInfo("Scene","Scena A Letto: gruppo gCinema spento")
    ])

    createTimer(now.plusSeconds(30), [|
      gScene.sendCommand(OFF)
      logInfo("Scene","Scena A Letto: finita")
    ])
end


rule "Sole"
when
    Item Scene_Sole changed to ON
then
    logInfo("Scene","Scena SOLE: iniziata")
    Tapp01.sendCommand(DOWN)
    createTimer(now.plusSeconds(22), [|
      Tapp01.sendCommand(STOP)
      gScene.sendCommand(OFF)
      logInfo("Scene","Scena SOLE: finita")
    ])
end

