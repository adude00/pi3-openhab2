rule "Lavoro"
when
    Item Scene_Lavoro changed to ON
then
  pushNotification("Scena: LAVORO", "La scena LAVORO è stata attivata")
  logInfo("Scene","Scena LAVORO: iniziata")

  gTappDog.sendCommand(DOWN)
  gTappP1.sendCommand(DOWN)
  gLuci.sendCommand(OFF)

  createTimer(now.plusSeconds(30), [|
    gScene.sendCommand(OFF)
    logInfo("Scene","Scena LAVORO: finita")
    ])


  // TERMOSTATO
  if (ts_sog_lavoro_off.state == ON) {
    createTimer(now.plusSeconds(3),  [ |
      if (tsSoggiorno.state == ON) {
        tsSoggiorno.sendCommand(OFF)
      logInfo("Scene","Scena Lavoro: termostato spento")
      }
    ])
  }
  // AIRCON
  if (ac_sog_lavoro_off.state == ON) {
    createTimer(now.plusSeconds(5),  [ |
      if (acSoggiornoPower.state == ON) {
        acSoggiornoPower.sendCommand(OFF)
      logInfo("Scene","Scena Lavoro: aircon spento")
      }
    ])
  }

  // IMPOSTA TEMP
  if (ac_sog_lavoro_change.state == ON) {
    createTimer(now.plusSeconds(7),  [ |
      acSoggiornoHeatSetpoint.sendCommand(ac_sog_lavoro_temp.state as Number)
      logInfo("Scene","Scena Lavoro: temperatura richiesta impostata")
    ])
  }

end

rule "A Casa"
when
    Item Scene_aCasa changed to ON
then
  pushNotification("Scena: A CASA", "La scena A CASA è stata attivata")
  logInfo("Scene","Scena A CASA: iniziata")


  var Number led03_w = led03_w_Morning.state
  var Number led03_c = led03_c_Morning.state

  gTappP2.sendCommand(UP)
  if (sunIsOut.state == ON) gTappP1.sendCommand(UP)
  IPCams.sendCommand(OFF)
  alexa_campanello.sendCommand(ON)

  // Accendo le luci in soggiorno in base alla configurazione
  sf04_Light.sendCommand(ON)
  led03_DimW.sendCommand(led03_w)
  led03_Dim.sendCommand(led03_c)

  // Accendo luci P1 visto che si entra da P1
  shelly03_R1.sendCommand(ON)
  shelly04_R1.sendCommand(ON)   
  shelly05_R1.sendCommand(ON)
  shelly2pm01_R1.sendCommand(ON)

  createTimer(now.plusSeconds(30), [|
    AutoRientro.sendCommand(OFF) 
    gScene.sendCommand(OFF)
    logInfo("Scene","Scena A CASA: finita")
    ])

  // IMPOSTA TEMP
  if (ac_sog_acasa_change.state == ON) {
    createTimer(now.plusSeconds(3),  [ |
      acSoggiornoHeatSetpoint.sendCommand(ac_sog_acasa_temp.state as Number)
      logInfo("Scene","Scena A Casa: temperatura richiesta impostata")
    ])
  }
  // AIRCON
  if (ac_sog_acasa_on.state == ON) {
    createTimer(now.plusSeconds(5),  [ |
      if (acSoggiornoPower.state == OFF) {
        acSoggiornoPower.sendCommand(ON)
      logInfo("Scene","Scena A Casa: aircon acceso")
      }
    ])
  }
  // TERMOSTATO
  if (ts_sog_acasa_on.state == ON) {
    createTimer(now.plusSeconds(7),  [ |
      if (tsSoggiorno.state == OFF) {
        tsSoggiorno.sendCommand(ON)
      logInfo("Scene","Scena A Casa: termostato acceso")
      }
    ])
  }

end

rule "Mattina: SIAMO SVEGLI"
when
    Item Scene_Mattina changed to ON
then
  pushNotification("Scena: MATTINA", "La scena MATTINA è stata attivata")
  logInfo("Scene","Scena MATTINA: iniziata")

  var Number led03_w = led03_w_Morning.state
  var Number led03_c = led03_c_Morning.state

  alexa_campanello.sendCommand(ON)
  
  // SOGGIORNO - CHANGE TEMP
  if (ac_sog_sveglia_change.state == ON) {
    createTimer(now.plusSeconds(3), [|
      acSoggiornoHeatSetpoint.sendCommand(ac_sog_sveglia_temp.state as Number)
      logInfo("Scene","MATTINA: Cambio temp soggiorno fatto. Temperatura impostata: " + ac_sog_sveglia_temp.state + "C")
    ])
  }
  // SOGGIORNO - CLIMA ON
  if (ac_sog_sveglia_on.state == ON) {
    createTimer(now.plusSeconds(5), [|
      acSoggiornoPower.sendCommand(ON)
      logInfo("Scene","MATTINA: AutoON Soggiorno: Accendo il Clima")
    ])
  }
  // SOGGIORNO - TERMOSTATO ON
  if (ts_sog_sveglia_on.state == ON) {
    createTimer(now.plusSeconds(37), [|
      tsSoggiorno.sendCommand(ON)
      logInfo("Scene","MATTINA: AutoON Soggiorno: Accendo il Termostato")
    ])
  }

  // CAMERETTA - AUTO OFF
  if (conf_autooff_ac_kid.state == ON) {
    logInfo("Scene","MATTINA: AutoOFF cameretta: Timer Partito")
    val int timer01mins = (conf_autooff_ac_kid_mins.state as Number).intValue
    createTimer(now.plusMinutes(timer01mins), [|
      DaikinCameretta_Power.sendCommand(OFF)
      logInfo("Scene","MATTINA: AutoOFF cameretta: Spento")
    ])
  }


  // CAMERETTA - CHANGE TEMP
  if (conf_autooff_ac_kid_chng.state == ON) {
    createTimer(now.plusSeconds(10), [|
      val int tempNum01 = (conf_mattina_ac_kid_temp.state as Number).intValue
      DaikinCameretta_SetPoint.sendCommand(tempNum01)
      DaikinCameretta_Fan.sendCommand("SILENCE")
      logInfo("Scene","MATTINA: Cambio temp cameretta fatto.")
    ])
  }


  // MATRIMONIALE - AC AUTO OFF
  if (conf_autooff_ac_bdr.state == ON) {
    logInfo("Scene","MATTINA: AutoOFF Bedroom: Spengo il Clima")
    DaikinMatrimoniale_Power.sendCommand(OFF)
  }

  // MATRIMONIALE - White Noise AUTO OFF
  if (WhiteNoiseBDRMautoOFF.state == ON) {
    logInfo("Scene","MATTINA: AutoOFF White Noise Bedroom: Spengo il rumore bianco")
    WhiteNoiseBDRM.sendCommand(OFF)
  }
  // GIRLS - White Noise AUTO OFF
  if (WhiteNoiseGirlsAutoOFF.state == ON) {
    logInfo("Scene","MATTINA: AutoOFF White Noise Girls: Spengo il rumore bianco")
    WhiteNoiseGirls.sendCommand(OFF)
  }

  // CAMERA ETHAN - AC AUTO OFF
  if (climaEthan_AutoOff.state == ON) {
    logInfo("Scene","MATTINA: AutoOFF Ethan: Spengo il Clima")
    climaEthan_Power.sendCommand(OFF)
  }

  gTappP2.sendCommand(UP)
  if (sunIsOut.state == ON) gTappP1.sendCommand(UP)

  IPCams.sendCommand(OFF)
  //tsBagno.sendCommand(ON)

  // Accendo le luci in soggiorno in base alla configurazione
  sf04_Light.sendCommand(ON)
  led03_DimW.sendCommand(led03_w)
  led03_Dim.sendCommand(led03_c)


  createTimer(now.plusSeconds(30), [|
    AutoRientro.sendCommand(OFF) 
    //acSoggiornoHeatSetpoint.sendCommand(23.0)
    gScene.sendCommand(OFF)
    logInfo("Scene","Scena MATTINA: finita")
    ])
end

rule "Usciamo"
when
    Item Scene_Usciamo changed to ON
then
  pushNotification("Scena: USCIAMO", "La scena USCIAMO è stata attivata")
  logInfo("Scene","Scena USCIAMO: iniziata")

  gTappAll.sendCommand(DOWN)

  createTimer(now.plusSeconds(120), [|
    gLuci.sendCommand(OFF)
    gScene.sendCommand(OFF)
    logInfo("Scene","Scena USCIAMO: Luci spente e scena finita")
    ])
  createTimer(now.plusSeconds(30), [|
    IPCams.sendCommand(ON)
    logInfo("Scene","Scena USCIAMO: Telecamere accese")
    ])
  createTimer(now.plusSeconds(300), [|
    AutoRientro.sendCommand(ON)
    ])

    // TERMOSTATO
    if (ts_sog_usciamo_off.state == ON) {
      createTimer(now.plusSeconds(3),  [ |
        if (tsSoggiorno.state == ON) {
          tsSoggiorno.sendCommand(OFF)
        logInfo("Scene","Scena Usciamo: termostato spento")
        }
      ])
    }
    // AIRCON
    if (ac_sog_usciamo_off.state == ON) {
      createTimer(now.plusSeconds(5),  [ |
        if (acSoggiornoPower.state == ON) {
          acSoggiornoPower.sendCommand(OFF)
        logInfo("Scene","Scena Usciamo: aircon spento")
        }
      ])
    }

    // IMPOSTA TEMP
    if (ac_sog_usciamo_change.state == ON) {
      createTimer(now.plusSeconds(7),  [ |
        acSoggiornoHeatSetpoint.sendCommand(ac_sog_usciamo_temp.state as Number)
        logInfo("Scene","Scena Usciamo: temperatura richiesta impostata")
      ])
    }

end


rule "Privacy"
when
    Item Scene_Privacy changed to ON
then
    logInfo("Scene","Scena PRIVACY: iniziata")
    Tapp01.sendCommand(DOWN)
    Tapp02.sendCommand(DOWN)
    createTimer(now.plusSeconds(30), [|
      gScene.sendCommand(OFF)
      logInfo("Scene","Scena PRIVACY: finita")
    ])
end

rule "Chiudi tutto"
when
    Item Scene_Chiudi changed to ON
then
    logInfo("Scene","Scena CHIUDI: iniziata")
    gTappAll.sendCommand(DOWN)
    createTimer(now.plusSeconds(30), [|
      gScene.sendCommand(OFF)
      logInfo("Scene","Scena CHIUDI: finita")
    ])
end

rule "Vado a Letto: BUONANOTTE"
when
    Item Scene_aLetto changed to ON
then
    logInfo("Scene","Scena A Letto: iniziata")

    // Luce camera a 10% subito
    led01_DimW.sendCommand(10)

    createTimer(now.plusSeconds(1),  [ |
      gTappAll.sendCommand(DOWN)
      logInfo("Scene","Scena A Letto: tapparelle abbassate")
    ])

  alexa_campanello.sendCommand(OFF)

    // TERMOSTATO
    if (ts_sog_night_off.state == ON) {
      createTimer(now.plusSeconds(3),  [ |
        if (tsSoggiorno.state == ON) {
          tsSoggiorno.sendCommand(OFF)
        logInfo("Scene","Scena A Letto: termostato spento")
        }
      ])
    }
    // AIRCON
    if (ac_sog_night_off.state == ON) {
      createTimer(now.plusSeconds(5),  [ |
        if (acSoggiornoPower.state == ON) {
          acSoggiornoPower.sendCommand(OFF)
        logInfo("Scene","Scena A Letto: aircon spento")
        }
      ])
    }

    // IMPOSTA TEMP
    if (ac_sog_night_change.state == ON) {
      createTimer(now.plusSeconds(7),  [ |
        acSoggiornoHeatSetpoint.sendCommand(ac_sog_night_temp.state as Number)
	logInfo("Scene","Scena A Letto: temperatura richiesta impostata")
      ])
    }

  // MATRIMONIALE - White Noise AUTO ON
  if (WhiteNoiseBDRMautoON.state == ON) {
    logInfo("Scene","Scena A Letto: AutoON White Noise: Accendo il rumore bianco")
    WhiteNoiseBDRM.sendCommand(ON)
  }

    createTimer(now.plusSeconds(5),  [ |
      gBuonanotte.sendCommand(OFF)
      logInfo("Scene","Scena A Letto: gruppo gBuonanotte spento")
    ])

    createTimer(now.plusSeconds(7),  [ |
      gCinema.sendCommand(OFF)
      logInfo("Scene","Scena A Letto: gruppo gCinema spento")
    ])

    createTimer(now.plusSeconds(30), [|
      gScene.sendCommand(OFF)
      logInfo("Scene","Scena A Letto: finita prima parte")
    ])
    createTimer(now.plusSeconds(300), [|
      gLuci.sendCommand(OFF)
      led01_DimW.sendCommand(OFF)
      logInfo("Scene","Scena A Letto: finita per davvero, spenta barra matrimoniale e tutte le altre luci")
    ])
end


rule "Sole"
when
    Item Scene_Sole changed to ON
then
    logInfo("Scene","Scena SOLE: iniziata")
    Tapp01.sendCommand(DOWN)
    createTimer(now.plusSeconds(20), [|
      Tapp01.sendCommand(STOP)
      gScene.sendCommand(OFF)
      logInfo("Scene","Scena SOLE: finita")
    ])
    Tapp02.sendCommand(DOWN)
end


rule "Nanna"
when
    Item Scene_Nanna changed to ON
then
    logInfo("Scene","Scena NANNA: iniziata")
    Tapp08.sendCommand(DOWN)

    alexa_campanello.sendCommand(OFF)

    if (conf_nanna_ac_kid_acon.state == ON) {
      logInfo("Scene","Nanna: Accendo clima cameretta")
      DaikinCameretta_Power.sendCommand(ON)
    }

    if (WhiteNoiseGirlsAutoON.state == ON) {
      logInfo("Scene","Nanna: Accendo rumore bianco")
      WhiteNoiseGirls.sendCommand(ON)
    }

    createTimer(now.plusSeconds(30), [|
      gScene.sendCommand(OFF)
      logInfo("Scene","Scena NANNA: finita")
    ])
end
