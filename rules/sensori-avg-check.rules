val prowl = getActions("prowl", "prowl:broker:mybroker")

rule "check sensor uptime state"
when
    //Time cron "0 0/30 * * * ?" // Every 30 minutes
    //Time cron "0 0 * * * ?" // Every hour
    Time cron "0 0 10 * * ?" // Every Day
then
    var Number state_cur
    var Number state_avg


    gTemp.members.forEach[i|

        state_cur = i.state as Number
	state_avg = i.averageSince(now.minusMinutes(600)) as Number
	    
	if ( state_cur == state_avg ) {
	    logInfo("sensors-check", "Item {} STUCK!! - NOW: {} - AVG {}",i.name, state_cur.toString, state_avg.toString)
	    prowl.pushNotification("Sensor " + i.name + " Stuck for 300mins!", "NOW: " + state_cur.toString + " - AVG: " + state_avg.toString + " - Check it out")
	}
    ]


    gHumd.members.forEach[i|

        state_cur = i.state as Number
	state_avg = i.averageSince(now.minusMinutes(1440)) as Number
	    
	if ( state_cur == state_avg ) {
	    logInfo("sensors-check", "Item {} STUCK!! - NOW: {} - AVG {}",i.name, state_cur.toString, state_avg.toString)
	    prowl.pushNotification("Sensor " + i.name + " Stuck for 60mins!", "NOW: " + state_cur.toString + " - AVG: " + state_avg.toString + " - Check it out")
	}
    ]


end
