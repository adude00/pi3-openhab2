import java.text.DecimalFormat

rule "Termostato Acceso"
  when
    Item spSoggiorno changed or
    Item Casa_Temperature_AVG changed or
    Item hsSoggiorno changed or
    Item tsSoggSensor changed or
    Item tsSoggiorno changed to ON
  then
  
  var Number cur_temp = Casa_Temperature_AVG.state
  // Check if we want to use sofa sensor and not house average and override in case
  if (tsSoggSensor.state == 2 ) cur_temp = sf04_Temp.state
  if (tsSoggSensor.state == 3 ) cur_temp = avgSoggiornoAvg.state

  var Number sp = spSoggiorno.state
  var Number setpoint = sp.floatValue
  var Number hs = hsSoggiorno.state
  var Number hysteresis = hs.floatValue
  //var Number tDiff = (setpoint - cur_temp).floatValue
  var Number tDiffD = (cur_temp - setpoint).floatValue
  var Number tDiffU = (cur_temp - setpoint + hysteresis).floatValue
  var Number sa = Air_Conditioner_Temperature.state as DecimalType
  var Number cdzTemp = 0
  //var Number debug = 0

  if (tsSoggiorno.state == ON) {
    if ( debug = 1 ) logInfo("tsSoggiorno","DEBUG tsSogg:" + cur_temp + "C, U:" + tDiffU + ", D:" + tDiffD +" - (" + setpoint + " +" + hysteresis + "C) A/C: " + sa + "C, divano: " + sf04_Temp.state + ", state: " + tsSoggSensor.state)

    // CHECK IF TEMPERATURE IS OK
    if (sa == 31.0) {
      if ( debug = 1 ) logInfo("tsSoggiorno","DEBUG tsSogg: stato sa5: " + sa)
      if (tDiffD > -2.0 )    cdzTemp = 30.0
    }
    if (sa == 30.0) {
      if ( debug = 1 ) logInfo("tsSoggiorno","DEBUG tsSogg: stato sa4: " + sa)
      if (tDiffU <  -2.0 )   cdzTemp = 31.0
      if (tDiffD >= -1.0 )   cdzTemp = 23.0
    }
    if (sa == 23.0) {
      if ( debug = 1 ) logInfo("tsSoggiorno","DEBUG tsSogg: stato sa3: " + sa)
      if (tDiffU <  -1.0 )   cdzTemp = 30.0
      if (tDiffD >= -0.5 )   cdzTemp = 20.0
    }
    if (sa == 20.0) {
      if ( debug = 1 ) logInfo("tsSoggiorno","DEBUG tsSogg: stato sa3: " + sa)
      if (tDiffU < -0.5 )   cdzTemp = 23.0
      if (tDiffD >= 0.0 )   cdzTemp = 19.0
    }
    if (sa == 19.0) {
      if ( debug = 1 ) logInfo("tsSoggiorno","DEBUG tsSogg: stato sa2: " + sa)
      if (tDiffU <  0.0 )   cdzTemp = 20.0
      if (tDiffD >= 0.5 )   cdzTemp = 18.0
    }
    if (sa == 18.0) {
      if ( debug = 1 ) logInfo("tsSoggiorno","DEBUG tsSogg: stato sa1: " + sa)
      if (tDiffU <  0.5 )   cdzTemp = 19.0
      if (tDiffD >= 1.0 )   cdzTemp = 10.0
    }
    if (sa == 10.0) {
      if ( debug = 1 ) logInfo("tsSoggiorno","DEBUG tsSogg: stato sa0: " + sa)
      if ( tDiffD <= -2.0 )                    cdzTemp = 31.0
      if ( tDiffD >  -2.0 && tDiffD <= -1.0 )  cdzTemp = 30.0
      if ( tDiffD >  -1.0 && tDiffD <= -0.5 )  cdzTemp = 23.0
      if ( tDiffD >  -0.5 && tDiffD <=  0.0 )  cdzTemp = 20.0
      if ( tDiffD >   0.0 && tDiffD <   0.5 )  cdzTemp = 19.0
      if ( tDiffD >   0.5 && tDiffU <   1.0 )  cdzTemp = 18.0
    }
    // ACTION if cdzTemp changed
    if (cdzTemp != 0 ) {
      if ( debug = 1 ) logInfo("tsSoggiorno","DEBUG tsSogg: imposto: " + cdzTemp )
      Air_Conditioner_Temperature.sendCommand(cdzTemp)
    } else {
      if ( debug = 1 ) logInfo("tsSoggiorno","DEBUG tsSogg: ok")
   }

  }
end

rule "Termostato Spento"
  when
    Item tsSoggiorno changed to OFF
  then
    if (tsSoggiornoOverride.state == OFF) {
      Air_Conditioner_Temperature.sendCommand(10.0)
    }
end

rule "Bagnetto ON"
  when
    Item tsSoggiornoBagnetto changed from OFF to ON
  then
    logInfo("tsSoggiorno","tsSoggiorno: Bagnetto ON")

    // Turn OVERRIDE ON
    tsSoggiornoOverride.sendCommand(ON)

    // Turn Thermostat OFF
    tsSoggiorno.sendCommand(OFF)

    // Forcing AIR to 23.0
    Air_Conditioner_Temperature.sendCommand(23.0)

    // After 30 minutes turn off bagnetto
    createTimer(now.plusSeconds(1800), [|
        tsSoggiornoBagnetto.sendCommand(OFF)
        logInfo("tsSoggiorno","tsSoggiorno: Bagnetto OFF dopo 30 min")
      ])
end


rule "Bagnetto OFF"
  when
    Item tsSoggiornoBagnetto changed from ON to OFF
  then
    logInfo("tsSoggiorno","tsSoggiorno: Bagnetto OFF: Inizio")
    tsSoggiorno.sendCommand(ON)
    tsSoggiornoOverride.sendCommand(OFF)
    logInfo("tsSoggiorno","tsSoggiorno: Bagnetto OFF: Fine")
end


rule "Medie 15m"
  when
    Item Casa_Temperature_AVG changed or
    Item sf04_Temp changed
  then

    var Number avgOrig = Casa_Temperature_AVG.averageSince(now.minusMinutes(30))
    val DecimalFormat df = new DecimalFormat("#.#")
    val Number avgRound = Double::valueOf(df.format(avgOrig.doubleValue))

    //avgSoggiornoAvg.postUpdate(Casa_Temperature_AVG.averageSince(now.minusMinutes(30)))
    avgSoggiornoAvg.postUpdate(avgRound)

    logInfo("AVG","AVG Rounded: " + avgRound )

    avgSoggiornoDivano.postUpdate(sf04_Temp.averageSince(now.minusMinutes(30)))
end
