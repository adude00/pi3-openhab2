import org.eclipse.smarthome.core.library.types.DecimalType
import org.eclipse.smarthome.model.script.actions.Timer

var boolean mAlaramTriggered = false 
var int mCurrentDimLevel = 0
val String LOG = "WakeUp"
var Timer mWakeUpTimer = null
var Timer mWakeUpACTimer = null
var int mDimStep
var int mTimeStep
val int DEFAULT_DIM_STEP = 2
val int DEFAULT_TIME_STEP = 1

rule "WakeUpAlarmSwitchOn"
when
    Item WakeUpAlarmSwitch changed to ON
then
    if (WakeUpMinute.state == NULL || WakeUpHour.state == NULL) {
        logInfo(LOG, "WakeUpAlarmMinute or WakeUpAlarmHour not set, alarm not processed")
    } else {
      var int nowHour = now.getHourOfDay
      var int wakeUpHour = (WakeUpHour.state as DecimalType).intValue

      var int hours = 0
      val int hourDiff = wakeUpHour - nowHour 
      if (hourDiff >= 0) {
          hours = hourDiff
      } else {
          hours = 24 + wakeUpHour - nowHour
      }
      var int minutes = 0
      val int nowMinute = now.getMinuteOfHour
      val int wakeUpMinute =  (WakeUpMinute.state as DecimalType).intValue
      var int minuteDiff = wakeUpMinute - nowMinute
      if (minuteDiff >= 0) {
          minutes = minuteDiff
      } else {
          minutes = 60 + wakeUpMinute - nowMinute
         if (hourDiff == 0) {
              hours = 24
          }
         hours--
      }
      
      var int totalMinutes = (hours*60) + minutes 
      logInfo(LOG, "Alarm: "  + hours + " h " + minutes + " min")
      logInfo(LOG, "Alarm TP will be set for: " + totalMinutes + " minutes")
      WakeUpAlarmTriggered.sendCommand(OFF)
      if (mWakeUpTimer !== null) {
          mWakeUpTimer.cancel
          mWakeUpTimer = null
      }
      mWakeUpTimer = createTimer(now.plusMinutes(totalMinutes), [|
                                         logInfo(LOG, "Alarm triggered! ")
                                         WakeUpAlarmTriggered.sendCommand(ON)
                                         mWakeUpTimer = null
                                         ])    

      if (WakeUpAC.state == ON) {
        var int totalMinutesAC = totalMinutes - 60 
        logInfo(LOG, "Alarm AC will be set for: " + totalMinutesAC + " minutes")

        WakeUpACTrigger.sendCommand(OFF)
        if (mWakeUpACTimer !== null) {
          mWakeUpACTimer.cancel
          mWakeUpACTimer = null
        }
        mWakeUpACTimer = createTimer(now.plusMinutes(totalMinutesAC), [|
          logInfo(LOG, "AC Alarm triggered! ")
          WakeUpACTrigger.sendCommand(ON)
          mWakeUpTimer = null
        ])    
      }

}
end


rule "WakeUpAlarmTriggeredOn"
when
  Item WakeUpAlarmTriggered changed to ON
then
  logInfo(LOG, "SVEGLIA: Alarm triggered. Starting alarm procedure")
  gTappWake.sendCommand(UP)
  createTimer(now.plusSeconds(30), [|
    WakeUpAlarmSwitch.sendCommand(OFF)
    WakeUpAlarmTriggered.sendCommand(OFF)
    logInfo(LOG, "SVEGLIA: Alarm procedure finished. Resetting triggers.")
    ])
end


rule "WakeUpAlarmSwitchOff"
when
    Item WakeUpAlarmSwitch changed to OFF
then
   logInfo(LOG, "SVEGLIA: Spengo la sveglia")
   if (mWakeUpACTimer !== null) {
       mWakeUpACTimer.cancel
       mWakeUpACTimer = null
   }
   if (mWakeUpTimer !== null) {
       mWakeUpTimer.cancel
       mWakeUpTimer = null
   }
   WakeUpAlarmTriggered.sendCommand(OFF)
end


rule "Repeat Alarm"
when
  // Alle 3 e 7 minuti di tutti i giorni riarmo la sveglia per la mattina
  Time cron "0 7 3 1/1 * ? *"
  // Generated with http://www.cronmaker.com
then
  logInfo(LOG, "SVEGLIA: Controllo se riattivare la sveglia")

  if (WakeUpAlarmRepeat.state == ON) {
    logInfo(LOG, "SVEGLIA: WakeUpAlarmRepeat = ON, riattivo la sveglia!!")
    WakeUpAlarmSwitch.sendCommand(ON)
  }

end


rule "WakeUpACTrigger Triggered"
when
  Item WakeUpACTrigger changed to ON
then
  logInfo(LOG, "WakeUpACTrigger Triggered. Starting AC alarm procedure")
  WakeUpACTrigger.sendCommand(OFF)
  
  if (WakeUpAC.state == ON) {
    var Number cur_temp = Casa_Temperature_AVG.state
    // Check if we want to use sofa sensor and not house average and override in case
    if (tsSoggSensor.state == 2 ) cur_temp = sf04_Temp.state
    var Number sp = spSoggiorno.state
    var Number setpoint = sp.floatValue
    var Number tDiffD = (cur_temp - setpoint).floatValue
    var Number mTimer = 60
    var Timer tDelay = null

    if ( tDiffD <= -3.0 )                   mTimer   = 0
    if ( tDiffD > -3.0 && tDiffD <= -2.5 )  mTimer   = 20
    if ( tDiffD > -2.5 && tDiffD <= -2.0 )  mTimer   = 30 
    if ( tDiffD > -2.0 && tDiffD <= -1.5 )  mTimer   = 40
    if ( tDiffD > -1.5 && tDiffD <= -1.0 )  mTimer   = 50

    logInfo("LOG","Ci sono: " + cur_temp + "C, tDiff: " + tDiffD + "C - Accendo A/C tra " + mTimer + " minuti") 

    tDelay = createTimer(now.plusMinutes(mTimer), [|
          logInfo(LOG, "Timer scaduto, accendo A/C")
          tsSoggiorno.sendCommand(ON)
          tDelay = null
          ])

  }
end


