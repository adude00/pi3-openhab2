import org.eclipse.smarthome.core.library.types.DecimalType
import org.eclipse.smarthome.model.script.actions.Timer

var boolean mAlaramTriggered = false 
var int mCurrentDimLevel = 0
val String LOG = "WakeUp"
var Timer mWakeUpTimer = null
var Timer mWakeUpACTimer = null
var int mDimStep
var int mTimeStep
val int DEFAULT_DIM_STEP = 2
val int DEFAULT_TIME_STEP = 1

rule "WakeUpAlarmSwitchOn"
when
    Item WakeUpAlarmSwitch changed to ON
then
    if (WakeUpMinute.state == NULL || WakeUpHour.state == NULL) {
        logInfo(LOG, "WakeUpAlarmMinute or WakeUpAlarmHour not set, alarm not processed")
    } else {
      var int nowHour = now.getHourOfDay
      var int wakeUpHour = (WakeUpHour.state as DecimalType).intValue

      var int hours = 0
      val int hourDiff = wakeUpHour - nowHour 
      if (hourDiff >= 0) {
          hours = hourDiff
      } else {
          hours = 24 + wakeUpHour - nowHour
      }
      var int minutes = 0
      val int nowMinute = now.getMinuteOfHour
      val int wakeUpMinute =  (WakeUpMinute.state as DecimalType).intValue
      var int minuteDiff = wakeUpMinute - nowMinute
      if (minuteDiff >= 0) {
          minutes = minuteDiff
      } else {
          minutes = 60 + wakeUpMinute - nowMinute
         if (hourDiff == 0) {
              hours = 24
          }
         hours--
      }
      
      var int totalMinutes = (hours*60) + minutes 
      logInfo(LOG, "Alarm will be set for: " + totalMinutes + " minutes")
      logInfo(LOG, "Alarm: "  + hours + " h " + minutes + " min")
      WakeUpAlarmTriggered.sendCommand(OFF)
      if (mWakeUpTimer !== null) {
          mWakeUpTimer.cancel
          mWakeUpTimer = null
      }
      mWakeUpTimer = createTimer(now.plusMinutes(totalMinutes), [|
                                         logInfo(LOG, "Alarm triggered! ")
                                         WakeUpAlarmTriggered.sendCommand(ON)
                                         mWakeUpTimer = null
                                         ])    

      if (WakeUpAC.state == ON) {
        var int totalMinutesAC = totalMinutes - 60 
        logInfo(LOG, "AC Alarm will be set for: " + totalMinutesAC + " minutes")
        logInfo(LOG, "AC Alarm: "  + hours - 1 + " h " + minutes + " min")
        WakeUpACTrigger.sendCommand(OFF)
        if (mWakeUpACTimer !== null) {
          mWakeUpACTimer.cancel
          mWakeUpACTimer = null
        }
        mWakeUpACTimer = createTimer(now.plusMinutes(totalMinutesAC), [|
          logInfo(LOG, "AC Alarm triggered! ")
          WakeUpACTrigger.sendCommand(ON)
          mWakeUpTimer = null
        ])    
      }

}
end


rule "WakeUpAlarmTriggeredOn"
when
    Item WakeUpAlarmTriggered changed to ON
then
   logInfo(LOG, "Alarm triggered. Starting alarm procedure")
      gTappWake.sendCommand(UP)
      WakeUpAlarmSwitch.sendCommand(OFF)
      WakeUpAlarmSwitch.sendCommand(ON)
end


rule "WakeUpAlarmSwitchOff"
when
    Item WakeUpAlarmSwitch changed to OFF
then
   logInfo(LOG, "SVEGLIA: Spengo la sveglia")
   if (mWakeUpACTimer !== null) {
       mWakeUpACTimer.cancel
       mWakeUpACTimer = null
   }
   if (mWakeUpTimer !== null) {
       mWakeUpTimer.cancel
       mWakeUpTimer = null
   }
   WakeUpAlarmTriggered.sendCommand(OFF)
end


rule "Repeat Alarm"
when
  // A mezzanotte e 01 di tutti i lavorativi riarmo la sveglia per la mattina
  Time cron "0 1 0 ? * MON,TUE,WED,THU,FRI *"
  // Generated with http://www.cronmaker.com
then
  logInfo(LOG, "SVEGLIA: Controllo se riattivare la sveglia")

  if (WakeUpAlarmRepeat.state == ON) {
    logInfo(LOG, "SVEGLIA: WakeUpAlarmRepeat = ON, riattivo la sveglia!!")
    WakeUpAlarmSwitch.sendCommand(ON)
  }

end
